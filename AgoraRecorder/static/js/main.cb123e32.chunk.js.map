{"version":3,"sources":["Call.tsx","hooks/useAgora.tsx","hooks/useAgoraVolumes.ts","index.tsx"],"names":["fs","window","require","process","on","console","log","document","getElementById","click","nw","Screen","Init","getUrlParam","param","queryString","location","search","paramValue","URLSearchParams","get","setTimeout","channels","client","map","AgoraRTC","createClient","codec","mode","Call","useState","appid","setAppid","token","setToken","v","channel","setChannel","Number","fps","setFps","recordMode","setRecordMode","agora","useAgora","agorasVolumes","useAgoraVolumes","allChannelRemoteUsers","useMemo","allusers","forEach","a","concat","remoteUsers","mediaRecorder","useRef","wStream","recordedChunks","startRecord","stream","getVideoTracks","getSettings","myRecorder","MediaRecorder","mimeType","current","ondataavailable","event","data","size","arrayBuffer","then","buffer","write","Buffer","from","push","start","videoParams","useEffect","user","videoTrack","getMediaStreamTrack","applyConstraints","frameRate","Math","abs","videoRoot","createElement","audioTrack","play","isTalking","maxSpeaker","i","remoteVolumes","length","uid","querySelector","getTrackId","stop","joinState","clearTimeout","canvasLooper","recodingDiv","drawCanvas","grid","ceil","sqrt","children","width","offsetWidth","height","offsetHeight","div","style","float","contains","appendChild","canvas","ctx","getContext","fillStyle","fillRect","videos","gridCount","videoWidth","videoHeight","x","y","vidIdx","video","drawImage","className","type","name","value","onChange","target","c","key","e","index","newArr","updateChannel","curFps","curMaxVideo","setMaxSpeaker","id","disabled","onClick","enableAudioVolumeIndicator","join","protocol","createWriteStream","chrome","tabCapture","capture","audio","videoConstraints","mandatory","minFrameRate","maxFrameRate","minWidth","innerWidth","maxWidth","minHeight","innerHeight","maxHeight","mediaStream","error","dcm","DesktopCaptureMonitor","once","order","constraints","chromeMediaSource","chromeMediaSourceId","registerStream","navigator","mediaDevices","getUserMedia","getDisplayMedia","leave","getTracks","t","end","blob","Blob","writeFileSync","url","URL","createObjectURL","body","href","download","revokeObjectURL","setJoinState","setRemoteUsers","useCallback","handleUserPublished","mediaType","subscribe","Array","handleUserUnpublished","handleUserJoined","handleUserLeft","off","clients","setRemoteVolumes","arrayRemoteVolumes","handleVolumeIndicator","volumes","newRemoteVolumes","flat","sort","b","level","String","localeCompare","slice","arrayIsSame","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cb123e32.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport AgoraRTC, {IAgoraRTCRemoteUser} from 'agora-rtc-sdk-ng';\nimport useAgora from './hooks/useAgora';\nimport useAgoraVolumes from './hooks/useAgoraVolumes';\nimport MediaPlayer from './components/MediaPlayer';\nimport './Call.css';\n\ndeclare let ImageCapture: any;\ndeclare let MediaRecorder: any;\ndeclare let Blob: any;\ndeclare let nw: any;\n\nconst fs = window.require ? window.require(\"fs\") : null;\nconst process = window.require ? window.require('process') : null;\n\nprocess?.on('SIGINT', () => {\n  console.log(\"process on SIGINT\");\n  document.getElementById(\"leave\")?.click();\n})\n\nif (typeof nw !== 'undefined') {\n  nw.Screen.Init();\n}\n\nconst getUrlParam = (param:string) => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const paramValue = urlParams.get(param);\n  return paramValue ? paramValue : \"\";\n};\n\nif(getUrlParam('join')==='1') {\n  setTimeout(()=>{\n    document.getElementById(\"join\")?.click();\n  }, 2000);\n}\n\nconst channels = [1, 2];\nconst client = channels.map(()=>AgoraRTC.createClient({ codec: 'h264', mode: 'rtc' }));\nconsole.log(\"outside function Call\");\n\nfunction Call() {\n  console.log(\"inside function Call\");\n  const [ appid, setAppid ] = useState(getUrlParam('appid'));\n  const [ token, setToken ] = useState(getUrlParam('token'));\n  const [ channel, setChannel ] = useState(channels.map(v => getUrlParam('channel'+v)));\n  const [ fps, setFps ] = useState(Number(getUrlParam('fps')) || -15);\n  const [ recordMode, setRecordMode ] = useState('NO');\n  const updateChannel = (index:number, c:string) => {\n    let newArr = [...channel];\n    newArr[index] = c;\n    setChannel(newArr); \n  }\n  const agora = client.map(useAgora);\n  const agorasVolumes = useAgoraVolumes(client);\n  const allChannelRemoteUsers = useMemo(() => {\n  //const allChannelRemoteUsers = () => {\n    let allusers:IAgoraRTCRemoteUser[] = [];\n    agora.forEach(a=>allusers=allusers.concat(a.remoteUsers));\n    return allusers;\n  }, [agora]);\n  \n  const mediaRecorder = useRef<any>(null);\n  const wStream = useRef<any>(null);\n  const recordedChunks = useRef<Array<Blob>>([]);\n\n  const startRecord = (stream:MediaStream) => {\n    console.log(stream.getVideoTracks()[0].getSettings());\n    //stream.getVideoTracks()[0].applyConstraints({frameRate:Math.abs(fps)});\n    let myRecorder = null;\n    if (nw.MediaRecorder) {\n      myRecorder = new nw.MediaRecorder(stream, 'video/mp4');\n    } else {\n      myRecorder = new MediaRecorder(stream, {mimeType: 'video/webm; codecs=vp8'});\n    }\n    mediaRecorder.current = myRecorder;\n    recordedChunks.current =[];\n    myRecorder.ondataavailable = (event:any) => {\n      if (event.data.size > 0) {\n        console.log(event);\n        if (wStream.current) {\n          event.data.arrayBuffer().then((buffer:ArrayBuffer) => wStream.current.write(Buffer.from(buffer)));\n        } else {\n          recordedChunks.current.push(event.data);\n        }\n      }\n    }\n    myRecorder.start(1000, {videoParams:\"preset=ultrafast\"});\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect FPS, allChannelRemoteUsers\");\n    allChannelRemoteUsers.forEach(user => {\n      user.videoTrack?.getMediaStreamTrack().applyConstraints({frameRate:Math.abs(fps)});\n    });\n  },[fps, allChannelRemoteUsers]);\n\n  //const imageCapturers = useRef<Array<any>>([]);\n  \n  const videoRoot = useRef(document.createElement('div'));\n  useEffect(() => {\n    //imageCapturers.current = [];\n    console.log(\"useEffect play videotrack [allChannelRemoteUsers]\");\n    allChannelRemoteUsers.forEach(user => {\n      user.audioTrack?.play();\n      if(user.videoTrack) {\n        let isTalking = agorasVolumes.maxSpeaker<=0;\n        for(let i=0; i<agorasVolumes.remoteVolumes.length && !isTalking;i++) {\n          isTalking = user.uid === agorasVolumes.remoteVolumes[i].uid;\n        }\n        if (isTalking) {\n          const video = videoRoot.current.querySelector(\"#video_\" + user.videoTrack.getTrackId()) as HTMLVideoElement;\n          if(!video) {\n            user.videoTrack.play(videoRoot.current);\n          }\n        } else {\n          user.videoTrack.stop();\n        }\n        //imageCapturers.current.push(new ImageCapture(user.videoTrack.getMediaStreamTrack()));\n      }\n    })\n    //console.log(imageCapturers.current);\n  });\n\n  const getGridCount = () => {\n    //return Math.ceil(Math.sqrt(allChannelRemoteUsers.length));\n    return Math.ceil(Math.sqrt(videoRoot.current.children.length));\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect draw canvas / video element [fps]\");\n    if (agora[0].joinState) {\n      clearTimeout(canvasLooper.current);\n      const recodingDiv = document.getElementById('recodingDiv')!;\n      if(fps>0) {\n        drawCanvas(fps)\n      } else {\n        const grid = getGridCount();\n        const width = recodingDiv.offsetWidth / grid + 'px';\n        const height = recodingDiv.offsetHeight / grid + 'px';\n        for (let i=0 ; i<videoRoot.current.children.length; i++) {\n          const div = videoRoot.current.children[i] as HTMLDivElement;\n          div.style.width = width;\n          div.style.height = height;\n          div.style.float = 'left';\n        }\n        if(!recodingDiv.contains(videoRoot.current)) {\n          recodingDiv.appendChild(videoRoot.current);\n        }       \n      }\n    }\n  });\n\n  const canvasLooper = useRef(0);\n  const drawCanvas = (fps:number) => {\n    const canvas = document.getElementById(\"recordingCanvas\") as HTMLCanvasElement;\n    if(!canvas) {\n      canvasLooper.current = setTimeout(drawCanvas, 1000/fps, fps);\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\")!;\n    ctx.fillStyle = \"hsl(0, 0%, 95%)\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const videos = allChannelRemoteUsers;\n    const gridCount = Math.ceil(Math.sqrt(videos.length));\n    const videoWidth = canvas.width / gridCount;\n    const videoHeight = canvas.height / gridCount;\n    for(let x=0; x < gridCount; x++) {\n      for(let y=0; y < gridCount; y++) {\n        const vidIdx = y*gridCount + x;\n        if (vidIdx >= videos.length) {\n          break;\n        }\n        const videoTrack = videos[vidIdx].videoTrack;\n        if (videoTrack) {\n          const video = videoRoot.current.querySelector(\"#video_\" + videoTrack.getTrackId()) as HTMLVideoElement;\n          if (video) {\n            ctx.drawImage(video, x*videoWidth, y*videoHeight, videoWidth, videoHeight);\n          }\n        }\n        /*imageCapturers.current[vidIdx]?.grabFrame().then((imageBitmap:ImageBitmap) => {\n          if(imageBitmap) {\n            ctx.drawImage(imageBitmap, x*videoWidth, y*videoHeight, videoWidth, videoHeight);\n          }\n        });*/\n      }\n    }\n    canvasLooper.current = setTimeout(drawCanvas, 1000/fps, fps);\n  }\n\n  /*const videoElements = \n      allChannelRemoteUsers.map(user => (<div className='remote-player-wrapper' key={user.uid} style={{float:\"left\", display:(fps>0?'none':'block')}}>\n        <div className='remote-player-text'>{`remoteVideo(${user.uid})`}</div>\n        <MediaPlayer videoTrack={user.videoTrack} audioTrack={user.audioTrack} width={1280/getGridCount()} height={720/getGridCount()}></MediaPlayer>\n      </div>));*/\n\n  const join = () => {\n    console.log(\"==== join is executed =====\");\n    client.forEach(c=>c.enableAudioVolumeIndicator());\n    agora.forEach((a,i)=>a.join(appid, channel[i], token));\n    if(recordMode === 'NO'){\n      return;\n    }\n    if(window.location.protocol === 'chrome-extension:') {\n      wStream.current = fs.createWriteStream(nw.MediaRecorder ? 'test.mp4':'test.webm');\n    }\n    if(window.location.protocol === 'chrome-extension:' && recordMode === 'TAB') {\n      chrome.tabCapture.capture({video:true, \n          audio:true, \n          videoConstraints:{\n            mandatory:{\n              minFrameRate: Math.abs(fps), \n              maxFrameRate: Math.abs(fps),\n              minWidth: window.innerWidth,\n              maxWidth: window.innerWidth,\n              minHeight: window.innerHeight,\n              maxHeight: window.innerHeight\n            }\n          }\n        }, (mediaStream) => {\n        if(mediaStream === null) {\n          console.error(\"chrome.tabCapture fail\");\n          return;\n        }\n        startRecord(mediaStream);\n      });              \n    } else if (typeof nw !== 'undefined' && recordMode ==='DCM') {\n      let dcm = nw.Screen.DesktopCaptureMonitor;\n      dcm.once(\"added\", async (id:string, name:string, order:string, type:string) => {\n        console.log(id + \", \" + name + \", \" + order + \", \" + type);\n        if (name === \"Agora Recorder\") {\n          dcm.stop();\n          let constraints = {\n            video: {\n               mandatory: {\n                   chromeMediaSource: 'desktop',\n                   chromeMediaSourceId: dcm.registerStream(id),\n                   minFrameRate:Math.abs(fps),\n                   maxFrameRate:Math.abs(fps)\n               }\n            }\n          };\n          try {\n            window.navigator.mediaDevices.getUserMedia(constraints as MediaStreamConstraints).then(startRecord);\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      });\n      dcm.start(false, true);\n    } else {\n      const mediaDevices = navigator.mediaDevices as any;\n      mediaDevices.getDisplayMedia({video:{frameRate:Math.abs(fps)}, audio:true}).then(startRecord);\n    }\n    //chrome.desktopCapture.chooseDesktopMedia([\"tab\",\"audio\"], (stream:string) => {\n    //  console.log(stream);\n    //});\n  }\n\n  return (\n    <div className='call'>\n      <form className='call-form'>\n        <label>\n          AppID:\n          <input type='text' name='appid' value={appid} onChange={(event) => { setAppid(event.target.value) }}/>\n        </label>\n        <label>\n          Token(Optional):\n          <input type='text' name='token' value={token} onChange={(event) => { setToken(event.target.value) }} />\n        </label>\n        {channels.map((c,i) =>(<label key={i}>Channel{c} <input type='text' name={'channel'+c} value={channel[i]} onChange={e => updateChannel(i,e.target.value)} /></label>))}\n        <label>\n          FPS:\n          <input type='number' name='fps' value={fps} onChange={(event) => { \n            const curFps = Number(event.target.value);\n            console.log(\"setFps:\" + curFps);\n            setFps(curFps);\n          }} />\n        </label>\n        <label>\n        Recording Mode:\n          <select value={recordMode} onChange={(event) => { setRecordMode(event.target.value) }}>\n            <option value=\"NO\">No</option>\n            <option value=\"TAB\">Tab</option>\n            <option value=\"DCM\">nw.dcm</option>\n            <option value=\"DISPLAYMEDIA\">getDisplayMedia</option>\n          </select>\n        </label>\n        <label>\n          MaxVideo:\n          <input type='number' name='maxVideo' value={agorasVolumes.maxSpeaker} onChange={(event) => { \n            const curMaxVideo = Number(event.target.value);\n            console.log(\"setMaxVideo:\" + curMaxVideo);\n            agorasVolumes.setMaxSpeaker(curMaxVideo);\n          }} />\n        </label>        \n        <div className='button-group'>\n          <button id='join' type='button' className='btn btn-primary btn-sm' disabled={agora[0].joinState} onClick={join}>Join</button>\n          <button id='leave' type='button' className='btn btn-primary btn-sm' disabled={!agora[0].joinState} onClick={() => {\n            agora.forEach((a)=>a.leave());\n            videoRoot.current = document.createElement('div');\n            clearTimeout(canvasLooper.current);\n            if (mediaRecorder.current) {\n              mediaRecorder.current.stop();\n              mediaRecorder.current.stream.getTracks().forEach((t:MediaStreamTrack)=>t.stop());\n              if (wStream.current) {\n                wStream.current.end();\n                wStream.current = null;\n              } else {\n                let blob = new Blob(recordedChunks.current, {\n                    type: 'video/webm'\n                });\n                if (fs) {\n                  blob.arrayBuffer().then((buffer:ArrayBuffer) =>fs.writeFileSync('./test.webm', Buffer.from(buffer)));\n                } else {\n                  var url = URL.createObjectURL(blob);\n                  var a = document.createElement('a');\n                  document.body.appendChild(a);\n                  a.href = url;\n                  a.download = 'test.webm';\n                  a.click();\n                  window.URL.revokeObjectURL(url);\n                }\n              }\n            }\n          }}>Leave</button>\n        </div>\n      </form>\n      <div className='player-container'>\n      {fps>0 ? <canvas id='recordingCanvas' width={1280} height={720}> </canvas> : <div id='recodingDiv' style={{width:1280, height:720}}/>}\n      </div>\n    </div>\n  );\n}\n\nexport default Call;\n","import { useState, useEffect, useCallback } from 'react';\nimport { IAgoraRTCClient, IAgoraRTCRemoteUser } from 'agora-rtc-sdk-ng';\n\nexport default function useAgora(client: IAgoraRTCClient | undefined)\n  :\n   {\n      joinState: boolean,\n      leave: Function,\n      join: Function,\n      remoteUsers: IAgoraRTCRemoteUser[],\n      //remoteVolumes: {level:number, uid:UID}[],\n    }\n{\n  const [joinState, setJoinState] = useState(false);\n\n  const [remoteUsers, setRemoteUsers] = useState<IAgoraRTCRemoteUser[]>([]);\n  //const [remoteVolumes, setRemoteVolumes] = useState<{level:number, uid:UID}[]>([]);\n\n  const join = useCallback(async(appid: string, channel: string, token?: string, uid?: string | number | null) => {\n    if (!client) return;\n    await client.join(appid, channel, token || null);\n    setJoinState(true);\n\n  },[client]);\n  /*async function join(appid: string, channel: string, token?: string, uid?: string | number | null) {\n    if (!client) return;\n    //client.enableAudioVolumeIndicator();\n    await client.join(appid, channel, token || null);\n    setJoinState(true);\n  }*/\n\n  const leave = useCallback(async()=>{\n    setRemoteUsers([]);\n    setJoinState(false);\n    await client?.leave();\n  },[client]);\n  /*async function leave() {\n    setRemoteUsers([]);\n    setJoinState(false);\n    await client?.leave();\n  }*/\n\n  useEffect(() => {\n    if (!client) return;\n    setRemoteUsers(client.remoteUsers);\n\n    const handleUserPublished = async (user: IAgoraRTCRemoteUser, mediaType: 'audio' | 'video') => {\n      await client.subscribe(user, mediaType);\n      // toggle rerender while state of remoteUsers changed.\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    }\n    const handleUserUnpublished = (user: IAgoraRTCRemoteUser) => {\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    }\n    const handleUserJoined = (user: IAgoraRTCRemoteUser) => {\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    }\n    const handleUserLeft = (user: IAgoraRTCRemoteUser) => {\n      setRemoteUsers(remoteUsers => Array.from(client.remoteUsers));\n    }\n    /*const handleVolumeIndicator = (volumes:{level:number, uid:UID}[]) => {\n      setRemoteVolumes(volumes);\n      //setRemoteVolumes(remoteVolumes => Array.from(volumes));\n      //remoteVolumes.current = Array.from(volumes);\n    }*/\n\n    client.on('user-published', handleUserPublished);\n    client.on('user-unpublished', handleUserUnpublished);\n    client.on('user-joined', handleUserJoined);\n    client.on('user-left', handleUserLeft);\n    //client.on('volume-indicator', handleVolumeIndicator);\n\n    return () => {\n      client.off('user-published', handleUserPublished);\n      client.off('user-unpublished', handleUserUnpublished);\n      client.off('user-joined', handleUserJoined);\n      client.off('user-left', handleUserLeft);\n      //client.off('volume-indicator', handleVolumeIndicator);\n    };\n  }, [client]);\n\n  return {\n    joinState,\n    leave,\n    join,\n    remoteUsers,\n    //remoteVolumes,\n  };\n}","import { useState, useEffect, useRef } from 'react';\nimport { IAgoraRTCClient, UID } from 'agora-rtc-sdk-ng';\n\nconst getUrlParam = (param:string) => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const paramValue = urlParams.get(param);\n  return paramValue ? paramValue : \"\";\n};\n\nexport default function useAgoraVolumes(clients: IAgoraRTCClient[]) {\n\n  const [remoteVolumes, setRemoteVolumes] = useState<{level:number, uid:UID}[]>([]);\n  const [maxSpeaker, setMaxSpeaker] = useState(Number(getUrlParam('maxvideo')) || 0);\n  //const remoteVolumes = useRef<{level:number, uid:UID}[]>([]);\n  const arrayRemoteVolumes = useRef<{level:number, uid:UID}[][]>([]);\n\n  useEffect(() => {\n    const handleVolumeIndicator = (i:number, volumes:{level:number, uid:UID}[]) => {\n      // any better way to init this ?\n      if(arrayRemoteVolumes.current.length < clients.length) {\n        for(let i=0; i<clients.length; i++) {\n          arrayRemoteVolumes.current.push([]);\n        }\n      }\n      arrayRemoteVolumes.current[i] = volumes;\n      //remoteVolumes.current = arrayRemoteVolumes.current.flat();\n      let newRemoteVolumes = arrayRemoteVolumes.current.flat();\n      newRemoteVolumes.sort((a,b) => {\n        if(a.level === b.level)\n          return String(b.uid).localeCompare(String(a.uid));\n        return b.level - a.level;\n      });\n      //TODO check if the uid has video before slicing it\n      newRemoteVolumes = newRemoteVolumes.slice(0, maxSpeaker);\n      let arrayIsSame = remoteVolumes.length === newRemoteVolumes.length;\n      \n      for(let i=0; i<remoteVolumes.length && arrayIsSame; i++) {\n        arrayIsSame = remoteVolumes[i].uid === newRemoteVolumes[i].uid;\n      }\n\n      if(!arrayIsSame) {\n        setRemoteVolumes(newRemoteVolumes);\n      }\n    }\n    if (maxSpeaker>0) {\n      clients.forEach((c,i)=>c.on('volume-indicator', (volumes:{level:number, uid:UID}[]) => {\n        handleVolumeIndicator(i,volumes);\n      }));\n    }\n\n    return () => {\n      // destructor\n      if (maxSpeaker>0) {\n        clients.forEach((c,i)=>c.off('volume-indicator', (volumes:{level:number, uid:UID}[]) => {\n          handleVolumeIndicator(i,volumes);\n        }));\n      }\n      setRemoteVolumes([]);\n    };\n  }, [clients, maxSpeaker]);\n\n  return {remoteVolumes, maxSpeaker, setMaxSpeaker};\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Call from './Call';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Call />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}